{"ast":null,"code":"var _jsxFileName = \"/home/zeekin99_project/Documents/digital_receptionist/GT_Digital_Receptionist/frontend_interface/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Chat, { Bubble, IconButton, useMessages } from \"@chatui/core\";\nimport \"@chatui/core/dist/index.css\";\nimport \"./index.css\";\nimport SplitPane from \"react-split-pane\"; //import Dictaphone from \"./Dictaphone\";\n\nimport API from \"./APIcall\"; //import ChatSDK from \"@chatui/core\";\n//import './chatui-theme.css';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialMessages = [{\n  type: 'text',\n  content: {\n    text: 'Hello, This is Digital Receptionist Sam'\n  },\n  user: {\n    avatar: 'http://127.0.0.1:5500/frontend_interface/src/logo.svg'\n  }\n}]; //\n\nexport default function App() {\n  _s();\n\n  const {\n    messages,\n    appendMsg,\n    setTyping\n  } = useMessages(initialMessages); //\n\n  function handleSend(type, val) {\n    if (type === \"text\" && val.trim()) {\n      appendMsg({\n        type: \"text\",\n        content: {\n          text: val\n        },\n        position: \"right\",\n        user: {\n          avatar: 'http://127.0.0.1:5500/frontend_interface/src/user.svg'\n        }\n      }); //\n\n      let response = API(val); //\n      //response.then(function(res) { return res[]})    \n\n      setTyping(true); //\n\n      setTimeout(async () => {\n        const data = await response;\n        appendMsg({\n          type: \"text\",\n          content: {\n            text: data\n          },\n          user: {\n            avatar: 'http://127.0.0.1:5500/frontend_interface/src/logo.svg'\n          }\n        });\n      }, 1000);\n    }\n  } //\n\n\n  function renderMessageContent(msg) {\n    const {\n      content\n    } = msg;\n    return /*#__PURE__*/_jsxDEV(Bubble, {\n      content: content.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }, this);\n  }\n  /*\n  new ChatSDK({\n    config: {\n      toolbar: [\n        {\n          type: 'speech',\n          icon: 'mic',\n          title: 'Hold to Speak'\n        }\n      ]\n    },\n    handlers: {\n      onToolbarClick: function (item, ctx) {\n        if (item.type === 'speech') {\n          // 这里改成 App 提供的 bridge 方法\n          nativeInvoke('speech', (text) => {\n            if (text) {\n              // 通过 setText 更新输入框内容\n              bot.appRef.current.setText(text);\n            }\n          });\n        }\n      }\n    }\n  }); \n  */\n\n\n  return /*#__PURE__*/_jsxDEV(SplitPane, {\n    split: \"vertical\",\n    defaultSize: 650,\n    minSize: 650,\n    maxSize: 800,\n    children: [/*#__PURE__*/_jsxDEV(Chat, {\n      locale: \"en-US\",\n      placeholder: \"Type here...\",\n      navbar: {\n        title: \"Digital Receptionist Sam\"\n      },\n      messages: messages,\n      renderMessageContent: renderMessageContent,\n      onSend: handleSend,\n      recorder: {\n        canRecord: true\n      },\n      toolbar: [{\n        type: \"speech\",\n        //icon: \"mic\",\n        title: \"Speak\",\n        img: \"/home/zeekin99_project/Documents/digital_receptionist/GT_Digital_Receptionist/voice.png\"\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Digital Human\", /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"http://localhost:5500/frontend_interface/src/digi_receptionist.png\",\n        alt: \"lol\",\n        height: 700,\n        width: 800,\n        class: \"center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"QcNvU78uK7mBLeMFe/kRjssc5Qo=\", false, function () {\n  return [useMessages];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/zeekin99_project/Documents/digital_receptionist/GT_Digital_Receptionist/frontend_interface/src/App.js"],"names":["React","Chat","Bubble","IconButton","useMessages","SplitPane","API","initialMessages","type","content","text","user","avatar","App","messages","appendMsg","setTyping","handleSend","val","trim","position","response","setTimeout","data","renderMessageContent","msg","title","canRecord","img"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Chat, { Bubble,  IconButton,  useMessages } from \"@chatui/core\";\nimport \"@chatui/core/dist/index.css\";\nimport \"./index.css\";\nimport SplitPane from \"react-split-pane\";\n//import Dictaphone from \"./Dictaphone\";\nimport API from \"./APIcall\"\n//import ChatSDK from \"@chatui/core\";\n//import './chatui-theme.css';\n\nconst initialMessages = [\n  {\n    type: 'text',\n    content: { text: 'Hello, This is Digital Receptionist Sam' },\n    user: { avatar: 'http://127.0.0.1:5500/frontend_interface/src/logo.svg'}\n  },\n];\n//\nexport default function App() {\n  const { messages, appendMsg, setTyping } = useMessages(initialMessages);\n//\n  function handleSend(type, val) \n  {\n    if (type === \"text\" && val.trim()) {\n      appendMsg({\n        type: \"text\",\n        content: { text: val },\n        position: \"right\",\n        user :{ avatar: 'http://127.0.0.1:5500/frontend_interface/src/user.svg' }\n      });\n//\n      let response = API(val)\n\n//\n      //response.then(function(res) { return res[]})    \n      setTyping(true);\n//\n      setTimeout(async () => {\n        const data = await response \n        appendMsg({\n          type: \"text\",\n          content: { text: data },\n          user: { avatar: 'http://127.0.0.1:5500/frontend_interface/src/logo.svg' },\n        });\n      }, 1000);\n    }\n  }\n//\n  function renderMessageContent(msg) {\n    const { content } = msg;\n    return <Bubble content={content.text} />;\n  }\n  /*\n  new ChatSDK({\n    config: {\n      toolbar: [\n        {\n          type: 'speech',\n          icon: 'mic',\n          title: 'Hold to Speak'\n        }\n      ]\n    },\n    handlers: {\n      onToolbarClick: function (item, ctx) {\n        if (item.type === 'speech') {\n          // 这里改成 App 提供的 bridge 方法\n          nativeInvoke('speech', (text) => {\n            if (text) {\n              // 通过 setText 更新输入框内容\n              bot.appRef.current.setText(text);\n            }\n          });\n        }\n      }\n    }\n  }); \n  */\n\n  return (\n    <SplitPane split='vertical'  defaultSize={650} minSize={650} maxSize={800}> \n      <Chat\n        locale=\"en-US\"\n        placeholder=\"Type here...\"\n        navbar={{ title: \"Digital Receptionist Sam\" }}\n        \n        messages={messages}\n        renderMessageContent={renderMessageContent}\n        onSend={handleSend}   \n        recorder={{ canRecord: true }}\n        toolbar={[\n          {\n            type: \"speech\",\n            //icon: \"mic\",\n            title: \"Speak\",\n            img: \"/home/zeekin99_project/Documents/digital_receptionist/GT_Digital_Receptionist/voice.png\"\n          }\n        ]}\n      /> \n      <div>Digital Human\n          <img src=\"http://localhost:5500/frontend_interface/src/digi_receptionist.png\" alt='lol' height={700} width={800} class='center'/>\n      </div>\n    </SplitPane>\n    \n  );\n}"]},"metadata":{},"sourceType":"module"}