{"ast":null,"code":"var _jsxFileName = \"/home/zeeking99/Documents/bot/GT_Digital_Receptionist/frontend_interface/src/App.js\",\n    _s = $RefreshSig$();\n\n//import React from \"react\";\n//import Chat, { Bubble, useMessages } from \"@chatui/core\";\n//import \"@chatui/core/dist/index.css\";\n//import \"./index.css\";\n//import SplitPane from \"react-split-pane\";\n//import API from \"./APIcall\"\n////import ChatSDK from \"@chatui/core\";\n////import './chatui-theme.css';\n//\n//const initialMessages = [\n//  {\n//    type: 'text',\n//    content: { text: 'Hello, This is Digital Receptionist Sam' },\n//    user: { avatar: 'http://127.0.0.1:5500/frontend_interface/src/logo.svg'}\n//  },\n//];\n//\n//export default function App() {\n//  const { messages, appendMsg, setTyping } = useMessages(initialMessages);\n//\n//  function handleSend(type, val) \n//  {\n//    if (type === \"text\" && val.trim()) {\n//      appendMsg({\n//        type: \"text\",\n//        content: { text: val },\n//        position: \"right\",\n//        user :{ avatar: 'http://127.0.0.1:5500/frontend_interface/src/user.svg' }\n//      });\n//\n//      let response = API(val)\n//\n//      console.log(response)\n//      //const res = await fetch(`http://localhost:5000/send`, \n//      //  {\n//      //    'method':'POST',\n//      //    headers:\n//      //    {\n//      //      'Content-Type':'application/json'\n//      //    },\n//      //    body: JSON.stringify({msg: val})\n//      //  })\n//      //  .then(response => response.json)\n//      //  .then()\n//      //  .catch(error => console.log(error))\n//\n//\n//      setTyping(true);\n//\n//      setTimeout(() => {\n//        appendMsg({\n//          type: \"text\",\n//          content: { text: \"Fuckkkkkkk\" },\n//          user: { avatar: 'http://127.0.0.1:5500/frontend_interface/src/logo.svg' },\n//        });\n//      }, 1000);\n//    }\n//  }\n//\n//  function renderMessageContent(msg) {\n//    const { content } = msg;\n//    return <Bubble content={content.text} />;\n//  }\n///*\n//  new ChatSDK({\n//    config: {\n//      toolbar: [\n//        {\n//          type: 'speech',\n//          icon: 'mic',\n//          title: '语音输入'\n//        }\n//      ]\n//    },\n//    handlers: {\n//      onToolbarClick: function (item, ctx) {\n//        if (item.type === 'speech') {\n//          // 这里改成 App 提供的 bridge 方法\n//          nativeInvoke('speech', (text) => {\n//            if (text) {\n//              // 通过 setText 更新输入框内容\n//              bot.appRef.current.setText(text);\n//            }\n//          });\n//        }\n//      }\n//    }\n//  });\n//*/\n//  return (\n//    <SplitPane split=\"vertical\" size={950}>\n//      <div>Digital Human</div>\n//    <SplitPane split='vertical' size={400}>\n//    <Chat\n//      locale=\"en-US\"\n//      placeholder=\"Type here...\"\n//      navbar={{ title: \"Digital Receptionist Sam\" }}\n//      messages={messages}\n//      renderMessageContent={renderMessageContent}\n//      onSend={handleSend}  \n//    />\n//    </SplitPane>\n//    </SplitPane>\n//    \n//  );\n//}\nimport React from \"react\";\nimport Chat, { Bubble, useMessages } from \"@chatui/core\";\nimport \"@chatui/core/dist/index.css\";\nimport \"./index.css\";\nimport SplitPane from \"react-split-pane\";\nimport API from \"./APIcall\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialMessages = [{\n  type: 'text',\n  content: {\n    text: 'Welcome to Digital Receptionist Sam'\n  },\n  user: {\n    avatar: 'http://127.0.0.1:5500/frontend_interface/src/logo.svg'\n  }\n}];\nexport default function App() {\n  _s();\n\n  const {\n    messages,\n    appendMsg,\n    setTyping\n  } = useMessages(initialMessages);\n\n  function handleSend(type, val) {\n    if (type === \"text\" && val.trim()) {\n      appendMsg({\n        type: \"text\",\n        content: {\n          text: val\n        },\n        position: \"right\",\n        user: {\n          avatar: 'http://127.0.0.1:5500/frontend_interface/src/user.svg'\n        }\n      });\n      setTyping(true);\n      const response = API(val);\n      console.log(response); //response is still as promise result which needs to be taken as json and text\n\n      setTimeout(() => {\n        appendMsg({\n          type: \"text\",\n          content: {\n            text: \"Almost there! Don't Give up\"\n          },\n          user: {\n            avatar: 'http://127.0.0.1:5500/frontend_interface/src/logo.svg'\n          }\n        });\n      }, 1000);\n    }\n  }\n\n  function renderMessageContent(msg) {\n    const {\n      content\n    } = msg;\n    return /*#__PURE__*/_jsxDEV(Bubble, {\n      content: content.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(SplitPane, {\n    split: \"vertical\",\n    size: 950,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Digital Human\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SplitPane, {\n      split: \"vertical\",\n      size: 500,\n      children: /*#__PURE__*/_jsxDEV(Chat, {\n        locale: \"en-US\",\n        placeholder: \"Type here\",\n        navbar: {\n          title: \"Digital Receptionist Sam\"\n        },\n        messages: messages,\n        renderMessageContent: renderMessageContent,\n        onSend: handleSend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"QcNvU78uK7mBLeMFe/kRjssc5Qo=\", false, function () {\n  return [useMessages];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/zeeking99/Documents/bot/GT_Digital_Receptionist/frontend_interface/src/App.js"],"names":["React","Chat","Bubble","useMessages","SplitPane","API","initialMessages","type","content","text","user","avatar","App","messages","appendMsg","setTyping","handleSend","val","trim","position","response","console","log","setTimeout","renderMessageContent","msg","title"],"mappingskB,OAAlB;AACA,OAAOC,IAAP,IAAeC,MAAf,EAAuBC,WAAvB,QAA0C,cAA1C;AACA,OAAO,6BAAP;AACA,OAAO,aAAP;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,GAAP,MAAgB,WAAhB;;AAEA,MAAMC,eAAe,GAAG,CACtB;AACEC,EAAAA,IAAI,EAAE,MADR;AAEEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAFX;AAGEC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,MAAM,EAAE;AAAV;AAHR,CADsB,CAAxB;AAQA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAE5B,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,SAAZ;AAAuBC,IAAAA;AAAvB,MAAqCZ,WAAW,CAACG,eAAD,CAAtD;;AAEA,WAASU,UAAT,CAAoBT,IAApB,EAA0BU,GAA1B,EAA+B;AAC7B,QAAIV,IAAI,KAAK,MAAT,IAAmBU,GAAG,CAACC,IAAJ,EAAvB,EAAmC;AACjCJ,MAAAA,SAAS,CAAC;AACRP,QAAAA,IAAI,EAAE,MADE;AAERC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,IAAI,EAAEQ;AAAR,SAFD;AAGRE,QAAAA,QAAQ,EAAE,OAHF;AAIRT,QAAAA,IAAI,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAV;AAJE,OAAD,CAAT;AAOAI,MAAAA,SAAS,CAAC,IAAD,CAAT;AAEA,YAAMK,QAAQ,GAAGf,GAAG,CAACY,GAAD,CAApB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ,EAXiC,CAYjC;;AAEAG,MAAAA,UAAU,CAAC,MAAM;AAChBT,QAAAA,SAAS,CAAC;AACRP,UAAAA,IAAI,EAAE,MADE;AAEPC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,IAAI,EAAE;AAAR,WAFF;AAGPC,UAAAA,IAAI,EAAE;AAAEC,YAAAA,MAAM,EAAE;AAAV;AAHC,SAAD,CAAT;AAKC,OANQ,EAMN,IANM,CAAV;AAOC;AAEF;;AAEH,WAASa,oBAAT,CAA8BC,GAA9B,EAAmC;AACjC,UAAM;AAAEjB,MAAAA;AAAF,QAAciB,GAApB;AACA,wBAAO,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEjB,OAAO,CAACC;AAAzB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE,QAAC,SAAD;AAAW,IAAA,KAAK,EAAC,UAAjB;AAA4B,IAAA,IAAI,EAAE,GAAlC;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEA,QAAC,SAAD;AAAW,MAAA,KAAK,EAAC,UAAjB;AAA4B,MAAA,IAAI,EAAE,GAAlC;AAAA,6BACA,QAAC,IAAD;AACE,QAAA,MAAM,EAAC,OADT;AAEE,QAAA,WAAW,EAAG,WAFhB;AAGE,QAAA,MAAM,EAAE;AAAEiB,UAAAA,KAAK,EAAE;AAAT,SAHV;AAIE,QAAA,QAAQ,EAAEb,QAJZ;AAKE,QAAA,oBAAoB,EAAEW,oBALxB;AAME,QAAA,MAAM,EAAER;AANV;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YAFA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAnDuBJ,G;UAEqBT,W;;;KAFrBS,G","sourcesContent":["//import React from \"react\";\n//import Chat, { Bubble, useMessages } from \"@chatui/core\";\n//import \"@chatui/core/dist/index.css\";\n//import \"./index.css\";\n//import SplitPane from \"react-split-pane\";\n//import API from \"./APIcall\"\n////import ChatSDK from \"@chatui/core\";\n////import './chatui-theme.css';\n//\n//const initialMessages = [\n//  {\n//    type: 'text',\n//    content: { text: 'Hello, This is Digital Receptionist Sam' },\n//    user: { avatar: 'http://127.0.0.1:5500/frontend_interface/src/logo.svg'}\n//  },\n//];\n//\n//export default function App() {\n//  const { messages, appendMsg, setTyping } = useMessages(initialMessages);\n//\n//  function handleSend(type, val) \n//  {\n//    if (type === \"text\" && val.trim()) {\n//      appendMsg({\n//        type: \"text\",\n//        content: { text: val },\n//        position: \"right\",\n//        user :{ avatar: 'http://127.0.0.1:5500/frontend_interface/src/user.svg' }\n//      });\n//\n//      let response = API(val)\n//\n//      console.log(response)\n//      //const res = await fetch(`http://localhost:5000/send`, \n//      //  {\n//      //    'method':'POST',\n//      //    headers:\n//      //    {\n//      //      'Content-Type':'application/json'\n//      //    },\n//      //    body: JSON.stringify({msg: val})\n//      //  })\n//      //  .then(response => response.json)\n//      //  .then()\n//      //  .catch(error => console.log(error))\n//\n//\n//      setTyping(true);\n//\n//      setTimeout(() => {\n//        appendMsg({\n//          type: \"text\",\n//          content: { text: \"Fuckkkkkkk\" },\n//          user: { avatar: 'http://127.0.0.1:5500/frontend_interface/src/logo.svg' },\n//        });\n//      }, 1000);\n//    }\n//  }\n//\n//  function renderMessageContent(msg) {\n//    const { content } = msg;\n//    return <Bubble content={content.text} />;\n//  }\n///*\n//  new ChatSDK({\n//    config: {\n//      toolbar: [\n//        {\n//          type: 'speech',\n//          icon: 'mic',\n//          title: '语音输入'\n//        }\n//      ]\n//    },\n//    handlers: {\n//      onToolbarClick: function (item, ctx) {\n//        if (item.type === 'speech') {\n//          // 这里改成 App 提供的 bridge 方法\n//          nativeInvoke('speech', (text) => {\n//            if (text) {\n//              // 通过 setText 更新输入框内容\n//              bot.appRef.current.setText(text);\n//            }\n//          });\n//        }\n//      }\n//    }\n//  });\n//*/\n//  return (\n//    <SplitPane split=\"vertical\" size={950}>\n//      <div>Digital Human</div>\n//    <SplitPane split='vertical' size={400}>\n//    <Chat\n//      locale=\"en-US\"\n//      placeholder=\"Type here...\"\n//      navbar={{ title: \"Digital Receptionist Sam\" }}\n//      messages={messages}\n//      renderMessageContent={renderMessageContent}\n//      onSend={handleSend}  \n//    />\n//    </SplitPane>\n//    </SplitPane>\n//    \n//  );\n//}\n\n\n\nimport React from \"react\";\nimport Chat, { Bubble, useMessages } from \"@chatui/core\";\nimport \"@chatui/core/dist/index.css\";\nimport \"./index.css\";\nimport SplitPane from \"react-split-pane\";\nimport API from \"./APIcall\";\n\nconst initialMessages = [\n  {\n    type: 'text',\n    content: { text: 'Welcome to Digital Receptionist Sam' },\n    user: { avatar: 'http://127.0.0.1:5500/frontend_interface/src/logo.svg' }\n  },\n];\n\nexport default function App() {\n\n  const { messages, appendMsg, setTyping } = useMessages(initialMessages);\n\n  function handleSend(type, val) {\n    if (type === \"text\" && val.trim()) {\n      appendMsg({\n        type: \"text\",\n        content: { text: val },\n        position: \"right\",\n        user :{ avatar: 'http://127.0.0.1:5500/frontend_interface/src/user.svg' }\n      });\n\n      setTyping(true);\n\n      const response = API(val)\n      console.log(response)\n      //response is still as promise result which needs to be taken as json and text\n\n      setTimeout(() => {\n       appendMsg({\n         type: \"text\",\n          content: { text: \"Almost there! Don't Give up\" },\n          user: { avatar: 'http://127.0.0.1:5500/frontend_interface/src/logo.svg' },\n        });\n       }, 1000);\n      }\n\n    }\n\n  function renderMessageContent(msg) {\n    const { content } = msg;\n    return <Bubble content={content.text} />;\n  }\n\n  return (\n    <SplitPane split=\"vertical\" size={950}>\n      <div>Digital Human</div>\n    <SplitPane split='vertical' size={500}>\n    <Chat\n      locale=\"en-US\"\n      placeholder = \"Type here\"\n      navbar={{ title: \"Digital Receptionist Sam\" }}\n      messages={messages}\n      renderMessageContent={renderMessageContent}\n      onSend={handleSend}\n    />\n    </SplitPane>\n    </SplitPane>\n\n  );\n}"]},"metadata":{},"sourceType":"module"}