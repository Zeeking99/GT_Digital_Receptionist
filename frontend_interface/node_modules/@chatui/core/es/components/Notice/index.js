import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState, useEffect, useRef } from 'react';
import clsx from 'clsx';
import { Icon } from '../Icon';
import { IconButton } from '../IconButton';
import { RichText } from '../RichText';
import countLines from '../../utils/countLines';
export var Notice = function Notice(props) {
  var content = props.content,
      url = props.url,
      _props$hasClose = props.hasClose,
      hasClose = _props$hasClose === void 0 ? true : _props$hasClose,
      onLinkClick = props.onLinkClick,
      onClose = props.onClose; // 展开还是收起状态

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      collapsed = _useState2[0],
      setCollapsed = _useState2[1]; // 是否需要展开收起


  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      hasMore = _useState4[0],
      setHasMore = _useState4[1];

  var contentRef = useRef(null);

  var handleToggle = function handleToggle(e) {
    setCollapsed(!collapsed);
    e.stopPropagation();
  };

  var handleLinkClick = function handleLinkClick(e) {
    if (url && onLinkClick) {
      onLinkClick(url);
    }

    e.preventDefault();
  };

  useEffect(function () {
    var cont = contentRef.current;

    if (cont && countLines(cont) > 2) {
      setHasMore(true);
      setCollapsed(true);
    }
  }, [content]);
  return /*#__PURE__*/React.createElement("div", {
    className: "Notice",
    role: "alert",
    "aria-atomic": true,
    "aria-live": "assertive"
  }, hasClose && /*#__PURE__*/React.createElement(IconButton, {
    className: "Notice-close",
    icon: "close",
    size: "lg",
    onClick: onClose,
    "aria-label": "\u5173\u95ED\u901A\u77E5"
  }), /*#__PURE__*/React.createElement("div", {
    className: "Notice-content"
  }, /*#__PURE__*/React.createElement("div", {
    className: clsx('Notice-text', {
      collapsed: collapsed
    }),
    "data-overflow": hasMore,
    ref: contentRef
  }, /*#__PURE__*/React.createElement(Icon, {
    className: "Notice-icon",
    type: "bullhorn"
  }), /*#__PURE__*/React.createElement(RichText, {
    content: content,
    onClick: handleLinkClick
  })), hasMore && /*#__PURE__*/React.createElement("div", {
    className: "Notice-actions"
  }, /*#__PURE__*/React.createElement(IconButton, {
    className: "Notice-more",
    icon: "chevron-down",
    size: "lg",
    "aria-expanded": !collapsed,
    onClick: handleToggle,
    "aria-label": "Toggle Notice"
  }))));
};