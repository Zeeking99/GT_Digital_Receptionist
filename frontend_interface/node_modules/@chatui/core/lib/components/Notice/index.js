"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Notice = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _clsx = _interopRequireDefault(require("clsx"));

var _Icon = require("../Icon");

var _IconButton = require("../IconButton");

var _RichText = require("../RichText");

var _countLines = _interopRequireDefault(require("../../utils/countLines"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Notice = function Notice(props) {
  var content = props.content,
      url = props.url,
      _props$hasClose = props.hasClose,
      hasClose = _props$hasClose === void 0 ? true : _props$hasClose,
      onLinkClick = props.onLinkClick,
      onClose = props.onClose; // 展开还是收起状态

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      collapsed = _useState2[0],
      setCollapsed = _useState2[1]; // 是否需要展开收起


  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      hasMore = _useState4[0],
      setHasMore = _useState4[1];

  var contentRef = (0, _react.useRef)(null);

  var handleToggle = function handleToggle(e) {
    setCollapsed(!collapsed);
    e.stopPropagation();
  };

  var handleLinkClick = function handleLinkClick(e) {
    if (url && onLinkClick) {
      onLinkClick(url);
    }

    e.preventDefault();
  };

  (0, _react.useEffect)(function () {
    var cont = contentRef.current;

    if (cont && (0, _countLines.default)(cont) > 2) {
      setHasMore(true);
      setCollapsed(true);
    }
  }, [content]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "Notice",
    role: "alert",
    "aria-atomic": true,
    "aria-live": "assertive"
  }, hasClose && /*#__PURE__*/_react.default.createElement(_IconButton.IconButton, {
    className: "Notice-close",
    icon: "close",
    size: "lg",
    onClick: onClose,
    "aria-label": "\u5173\u95ED\u901A\u77E5"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "Notice-content"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _clsx.default)('Notice-text', {
      collapsed: collapsed
    }),
    "data-overflow": hasMore,
    ref: contentRef
  }, /*#__PURE__*/_react.default.createElement(_Icon.Icon, {
    className: "Notice-icon",
    type: "bullhorn"
  }), /*#__PURE__*/_react.default.createElement(_RichText.RichText, {
    content: content,
    onClick: handleLinkClick
  })), hasMore && /*#__PURE__*/_react.default.createElement("div", {
    className: "Notice-actions"
  }, /*#__PURE__*/_react.default.createElement(_IconButton.IconButton, {
    className: "Notice-more",
    icon: "chevron-down",
    size: "lg",
    "aria-expanded": !collapsed,
    onClick: handleToggle,
    "aria-label": "Toggle Notice"
  }))));
};

exports.Notice = Notice;